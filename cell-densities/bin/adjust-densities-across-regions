#!/usr/bin/env python
# SPDX-License-Identifier: Apache-2.0
import sys
import os
import pandas
import numpy

from voxcell import VoxelData

from nrrdhlp.find_atlas_files import find_hierarchy, find_regions
from nrrdhlp import Masker


def make_fn(root, mtype, fixed=False):
    if fixed:
        if not os.path.isdir(root + "_FIX"):
            os.makedirs(root + "_FIX")
        return os.path.join(root + "_FIX", mtype) + ".nrrd"
    return os.path.join(root, mtype) + ".nrrd"


def adjust_across_regions(root, adjustments, masker):
    mtypes = adjustments.index.to_frame()['mtype'].drop_duplicates().values
    regions = adjustments.index.to_frame()['region'].drop_duplicates().values
    layers = adjustments.index.to_frame()['layer'].drop_duplicates().values

    for mtype in mtypes:
        vol = VoxelData.load_nrrd(make_fn(root, mtype))
        for l in layers:
            for reg in regions:
                mask = masker.mask(["and", ["Layer" + l, reg]])
                n = mask.sum()
                try:
                    fac = adjustments[mtype][reg][l]
                    if not numpy.isnan(fac) and not numpy.isinf(fac):
                        print("In layer {0} of {1}: Adjusting {2} voxel with a factor of {3}".format(l, reg, n, fac))
                        vol.raw[mask] = fac * vol.raw[mask]
                except KeyError:
                    pass
        vol.to_nrrd(make_fn(root, mtype, fixed=True))


def main(root, adjustment_file):
    adjustments = pandas.read_pickle(adjustment_file)
    full_fn_hierarchy = find_hierarchy(root, format="path")
    full_fn_regions = find_regions(root, format="path")
    masker = Masker(full_fn_hierarchy, full_fn_regions)
    adjust_across_regions(root, adjustments, masker)


if __name__ == "__main__":
    root = sys.argv[1]
    adjustment_file = sys.argv[2]
    main(root, adjustment_file)
