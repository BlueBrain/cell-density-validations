#!/usr/bin/env python
import sys
import pandas

from nrrdhlp.find_atlas_files import load_all_densities, find_hierarchy, find_regions
from nrrdhlp.hierarchyhlp import list_cortex_regions
from nrrdhlp import Masker

layers_pooled = ["1", "2/3", "4", "5", "6"]
layers_split = ["1", "2", "3", "4", "5", "6"]


def compare_across_regions(densities, masker, lst_regions):
    if len(masker.target_ids(["and", ["Isocortex", "Layer2/3"]])) > 0:
        layers = layers_pooled
    else:
        layers = layers_split
    vxl_vol = masker.annotation.voxel_volume
    res_raw = []
    for i, l in enumerate(layers):
        print(str(i))
        for reg in lst_regions:
            mask = masker.mask(["and", ["Layer" + l, reg]])
            mask_vol = mask.sum() * vxl_vol
            for mtype, dens in densities.items():
                raw = dens.raw[mask]
                mn_value = raw.mean()
                mx_to_median = raw.max() / (numpy.percentile(raw[raw > 0], 50) + 1E-6)
                mx_to_99 = raw.max() / (numpy.percentile(raw[raw > 0], 99) + 1E-6)
                res_raw.append((mtype, l, reg, mn_value, mask_vol, mx_to_median, mx_to_99))

    res_raw = pandas.DataFrame(res_raw, columns=["Mtype", "Layer", "Region", "Density",
                                                 "Volume", "Max to median", "Max to 99"])
    res = pandas.DataFrame(res_raw[["Density", "Volume", "Max to median", "Max to 99"]].values,
                           columns=["Density", "Volume", "Max to median", "Max to 99"],
                           index=pandas.MultiIndex.from_frame(res_raw[["Mtype", "Layer", "Region"]]))
    return res


def main(root):
    densities = load_all_densities(root)
    full_fn_hierarchy = find_hierarchy(root, format="path")
    if full_fn_hierarchy is None:
        print("No region hierarchy file found under {0}.".format(root))
        sys.exit(2)
    hier_json = find_hierarchy(root, format="json")
    full_fn_regions = find_regions(root, format="path")
    if full_fn_regions is None:
        print("No region annotation file found under {0}.".format(root))
        sys.exit(2)
    masker = Masker(full_fn_hierarchy, full_fn_regions)
    lst_regions = list_cortex_regions(hier_json, root_acronym="Isocortex")
    return compare_across_regions(densities, masker, lst_regions)


if __name__ == "__main__":
    root = sys.argv[1]
    out_fn = sys.argv[2]
    res = main(root)
    res.to_pickle(out_fn)
